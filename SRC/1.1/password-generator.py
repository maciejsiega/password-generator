#!/usr/bin/env python3# -*- coding: utf-8 -*-import osimport randomimport timeimport pyperclip#main menu functiondef menu():    cls()    print(""" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                                                           * *  This is a passwords generator program made by Maciej Siega - Free to use * *                                                               version 1.1 * *                                                                           * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                                                           * * Now,tell me - what are your requirements for the passwords:               * *                                                                           * * 1. Capital and small letters, numbers and special characters              * * 2. Capital and small letters and numbers                                  * * 3. Capital and small letters and special characters                       * *                                                                           * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *        """)    try:        choiceStr=int(input("What is your choice? "))    except ValueError:        print("You should choose a number between 1 to 3")        time.sleep(3)        return menu()    except KeyboardInterrupt:        print("Keyboard interrupt error! ")        time.sleep(3)        return menu()    except:        print("General error!")        time.sleep(3)    else:        if(choiceStr>3 or choiceStr<1):            cls()            print("You should choose a number between 1 to 3")            time.sleep(3)            return menu()        else:            return choiceStr#complexity deciding menu functiondef decide():    #password lenght selection    try:        charCount = int(input("How many characters per password should be generated: "))    except ValueError:        print("You should type a number! ")        time.sleep(3)        return decide()    except KeyboardInterrupt:        print("Keyboard interrupt error! ")        time.sleep(3)        return decide()    except:        print("General error")        time.sleep(3)        return decide()    else:        if(charCount<8):            cls()            print("You should choose a number 8 or greater")            time.sleep(3)            return decide()        elif(charCount>64):            cls()            print("There is completely no reason for a such a large number - maximum is 64")            time.sleep(3)            return decide()    #password count selection    try:        passCount = int(input("How many passwords should be generated: "))    except ValueError:        print("You should type a number! ")        return decide()    except KeyboardInterrupt:        print("Keyboard interrupt error! ")        return decide()    except:        print("General error")        return decide()    else:        if(passCount<1):            cls()            print("You should choose a number 1 or greater")            return decide()        elif(passCount>1000000):            cls()            print("There is completely no reason for such a big number")            return decide()    return charCount, passCount#saving to the file in A modedef save2file(password):    try:        file = open("Passwords.txt",'a')    except IOError as e:        print(e.test_strerror)    else:        file.write(password)        file.write("\n")        file.close()#check if the password has at least 5 letters (small or Capital but at least 1 of each)#and at least 1 number or/and at least 1 special character (depends from selection from menu())def checkPassword(password, complexity):    if(complexity==1):        countC=0        countS=0        countN=0        countSpec=0        for i in password:            for j in varListC:                if(i==j):                    countC+=1        for i in password:            for j in varListS:                if(i==j):                    countS+=1        for i in password:            for j in varListN:                if(i==j):                    countN+=1        for i in password:            for j in varListSpec:                if(i==j):                    countSpec+=1        if(countC>=1 and countS>=1 and countC+countS>=5 and countN>=1 and countSpec>=1):            return True        else:            return False    elif(complexity==2):        countC=0        countS=0        countN=0        for i in password:            for j in varListC:                if(i==j):                    countC+=1        for i in password:            for j in varListS:                if(i==j):                    countS+=1        for i in password:            for j in varListN:                if(i==j):                    countN+=1        if(countC>=1 and countS>=1 and countC+countS>=5 and countN>=1):            return True        else:            return False    elif(complexity==3):        countC=0        countS=0        countSpec=0        for i in password:            for j in varListC:                if(i==j):                    countC+=1        for i in password:            for j in varListS:                if(i==j):                    countS+=1        for i in password:            for j in varListSpec:                if(i==j):                    countSpec+=1        if(countC>=1 and countS>=1 and countC+countS>=5 and countSpec>=1):            return True        else:            return False    else:        print("General error")        return False#clearing file contentdef clearFile():    try:        file = open("Passwords.txt",'w')    except IOError as e:        print(e.test_strerror)    else:        file.close()#clearing screen (works on both linux/mac and windows based systems)def cls():    if(os.name=='nt'):        os.system("cls")    else:        os.system("clear")#generating password function (needs length of the password and complexity level as arguments)def generatePassword(length,complexity):    if(complexity==1):        password='';        i=0        while i<length:            password=password + varListCombinedAll[random.randint(0,len(varListCombinedAll)-1)]            i+=1        if(checkPassword(password,complexity)==True):            return password        else:            generatePassword(length,complexity)    elif(complexity==2):        password='';        i=0        while i<length:            password=password + varListCombinedCharPlusNumbers[random.randint(0,len(varListCombinedCharPlusNumbers)-1)]            i+=1        if(checkPassword(password,complexity)==True):            return password        else:            generatePassword(length,complexity)    elif(complexity==3):        password='';        i=0        while i<length:            password=password + varListCombinedCharPlusSpec[random.randint(1,len(varListCombinedCharPlusSpec)-1)]            i+=1        if(checkPassword(password,complexity)==True):            return password        else:            generatePassword(length,complexity)    else:        print("Complexity error - please start over again")        main()#main functiondef main():    complexity= menu()    decideVar = decide()    length=decideVar[0]    count=decideVar[1]    cls()    i=0    l = 69    print()    while i<count:        password=generatePassword(length,complexity)        if(password!=None):            if(i%200==0 and count!=1):                cls()                print()                print("* GENERATING IN PROGRESS *".center(l," "))                print("".center(l,"*"))                message="* "+str(round(i/count*100))+"% *"                print(message.center(l," "))                print("".center(l,"*"))                print("* PLEASE  WAIT *".center(l," "))                print("".center(l,"*"))            elif(i==(count-1) and count!=1):                cls()                print()                print("* GENERATING COMPLETE *".center(l, " "))                print("".center(l,"*"))                print("* 100% *".center(l, " "))                print("".center(l,"*"))                print("* Passwords saved to the Passwords.txt *".center(l, " "))                print()                print("* Thank you for using my program *".center(l, " "))            if (count==1):                cls()                print()                print("* GENERATING COMPLETE *".center(l," "))                print(" Your password is printed below ".center(l,"*"))                print()                print(password.center(l," "))                print()                print(" It also has been copied to the clipboard ".center(l,"*"))                print(" and saved to Passwords.txt ".center(l, "*"))                print()                print("* Thank you for using my program *".center(l, " "))                print("\n\n")                pyperclip.copy(password)                time.sleep(10)            save2file(password)            i+=1    time.sleep(5)#global variables        varListC=['A','B','C','D','E','F','G','H','I','J','K','L','M',                 'N','O','P','Q','R','S','T','U','W','X','Y','Z']varListS=['a','b','c','d','e','f','h','h','i','j','k','l','m',                 'n','o','p','q','r','s','t','u','w','x','y','z']varListN=['1','2','3','4','5','6','7','8','9','0']varListSpec=['@','#','!','$','%','?','>','<','.',',',']','[','}','{','+','-','_','^','=','&','*']varListCombinedAll = varListC + varListS + varListN + varListSpecvarListCombinedCharPlusNumbers = varListC + varListS + varListNvarListCombinedCharPlusSpec = varListC + varListS + varListSpec       clearFile()main()